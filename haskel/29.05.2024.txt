##JAK KOLOS MA WYGLADAC##
%jak sie definiuje typy funkcje typ ogolny i szczegolowy
%umiec zdefiniowac funkcje dla innych typow np bool czy napisy zwraca
%przypomniec sobie definicje warunkowe strazniki if then else 
%3 sposoby definiowania funkcji dla list
rekurencja
definicja z kwantyfikatorem
defnicja z czym tam
%kilka wyrazen w ktorych beda operatory dla list wyznaczanie elementu listy o podanym indeksie konkatenacja list i wylicza sie wartosc takiego wyrazenie i wyrazenia ma kwantyfikatorem
------------------------------------------------------------------------------
Listy mozna tworzyc z pomoca wyrazen z kwalifikatorami
ogolona postac to:
[wyrazenie|kwalifikator]

[x*x|x <-[1..10], even x]=[4,16,36,64,100]
%
[2*x|x<-[1..5]]=[2,4,6,8,10] kazdy elemetn 1..5 mnozumy przez 2
%
[x 'mod 3'|y<-[5..10]]=[2,0,1,2,0,1]
%
[a*b|(a,b)<-[(1,2),(2,3),(3,4)]]=[2,6,12]
%
[(x,y)|x<-[1,2],y<-[3,4]]=[(1,3),(1,4),(2,3),(2,4)]
%
[x|x<-[1..12],y<-[1..12],x*y==12]=[1,2,3,4,6,12]
%
[x|x<-[-5,2,3,-2],x>0]=[2,3]
%
[x*y|x<-[1..3],y<-[1..x]]=[1,2,4,3,6,9]
%
[x+y|x<-[1..4],y<-[x..4]]=[2,3,4,5,4,5,6,6,7,8]
%
[x-y|x<-[1..3],y<-[1..x]]=[0,1,0,2,1,0]
-------------------------------------------------------------------------
#defuiniowanie list z kwantyfikatorem

kwadrat_lista::[INT]->[INT]
kwadrat_lista xs=[x*x|x<-xs]
x<-xs to znaczy ze za x podstawiamy kolejne elementy listy xs

#lista mniejsza o1 

lista_mniejsza_o1::[INT]->[INT]
lista_mniejsza_o1 xs=[x-1|x<-xs]

#lista razy 5

razy_5::[INT]->[INT]
razy_5 xs=[x*5|x<-xs]

--------------------------------------------------------------------------

funkcja map w heskel
razy  2
razy_dwa_lista xs = map razy_dwa xs

#lista mniejsza o1 przy uzyciu funkcji map 

mniejsza_o1 x=x-1
lista_mniejsza_o1::[INT]->[INT]
lista_mniejsza_o1 xs=map mniejsza_o1 xs

#kwadrat lista

kwadrat x=x*x
kwadrat_lista::[INT]->[INT]
kwadrat_lista xs=map kwadrat xs

#lista wieksza o2 na 3 sposob
-rekurencja
-klalifikator
-map
%rekurencja 
lista_wieksza_o2::[INT]->[INT]
wiekszao2 x=x+2
lista_wieksza_o2[]=[]
lista_wieksza_o2(x:xs)=(wiekszao2 x):(lista_wieksza_o2 xs)


%klarifikator
lista_wieksza_o2::[INT]->[INT]
lista_wieksza_o2 xs=[x+2|x<-xs]

%map
wieksza_o2 x=x+2
lista_wieksza_o2 xs= map wieksza_o2 xs














